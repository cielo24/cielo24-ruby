=begin
#Cielo24

#The cielo24 Web Services Platform API allows developers to easily integrate transcription, captioning and keyword extraction into their applications without having to use a manual web portal.

The version of the OpenAPI document: 1.0.0
Contact: devs@cielo24.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.0

=end

require 'spec_helper'
require 'json'

# Unit tests for cielo24::JobApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'JobApi' do
  before do
    # run before each test
    @api_instance = cielo24::JobApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of JobApi' do
    it 'should create an instance of JobApi' do
      expect(@api_instance).to be_instance_of(cielo24::JobApi)
    end
  end

  # unit tests for add_media_file
  # Add a piece of media to an existing job using a local file. No content-type should be included in the HTTP header. The media should be uploaded as raw binary, no encoding (base64, hex, etc) is required. Chunk-transfer encoding is NOT supported. File size is limited to 10 gb
  # @param v 
  # @param job_id 
  # @param content_length 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :is_duplicate 
  # @return [AddMediaResponse]
  describe 'add_media_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for add_media_url
  # Add a piece of media to an existing job using a public media url. A job may only have a single piece of media associated with it, attempting to add additional media will return an error code.
  # @param v 
  # @param job_id 
  # @param media_url 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :is_duplicate 
  # @return [AddMediaResponse]
  describe 'add_media_url test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for authorize_job
  # Authorize an existing job. If your account has the \&quot;customer authorization\&quot; feature enabled (it is not enabled by default) jobs you create will be held in the \&quot;Authorizing\&quot; state until you call this method. Calling this method on a job that is not the \&quot;Authorizing\&quot; state has no effect and will return success. Please contact support@cielo24.com to enable the \&quot;customer authorization\&quot; feature.
  # @param v 
  # @param job_id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'authorize_job test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_caption
  # Get the caption file for a job. The job must have completed transcription before a caption can be downloaded.
  # @param v 
  # @param job_id 
  # @param caption_format 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :build_url Rather than returning the file, return a permanent URL to the file.
  # @option opts [Integer] :caption_words_min Minimum number of words allowed in a caption.
  # @option opts [String] :caption_by_sentence When true, puts each sentence into its own caption. When false, more than one sentence may appear in a single caption.
  # @option opts [Integer] :characters_per_caption_line Maximum number of characters to be displayed on each caption line.
  # @option opts [String] :dfxp_header Allows you to specify a custom header for your DFXP caption file. The header should be the entire contents of the header including the opening and closing tags. Ignored if caption_format does not equal DFXP.
  # @option opts [String] :disallow_dangling Will prevent captions from having the last word in a sentence start a new line. Last words will ALWAYS be kept on the same line, even if it breaks the characters_per_caption_line option.
  # @option opts [String] :display_effects_speaker_as Determines what speaker name should used for sound effects.
  # @option opts [String] :display_speaker_id Determines the way speakers are identified in the captions. Choose \&quot;no\&quot; to not display speaker identities at all: \&quot;&gt;&gt; example\&quot; Choose \&quot;number\&quot; to display only the speaker number: \&quot;&gt;&gt; Speaker 1: example\&quot; Choose \&quot;name\&quot; to display the speaker name: \&quot;&gt;&gt; John Doe: example\&quot;. If you choose \&quot;name\&quot;, the speaker number will be displayed if the name is not available.
  # @option opts [String] :iwp_name The named version of element list to generate the transcript from. If not specified, the transcript will be generated from the latest version.
  # @option opts [String] :elementlist_version The version of element list to generate the captions from. If not specified, the caption will be generated from the latest version. (ISO 8601 Date String)
  # @option opts [String] :emit_speaker_change_tokens_as Determine what characters to use to denote speaker changes.
  # @option opts [String] :force_case Force the contents of the captions to be all UPPER or lower case. If blank, the case of the captions is not changed.
  # @option opts [String] :include_dfxp_metadata When true, and the caption format requested is DFXP, the jobs name, ID and language will be added to the DFXP metadata header. When false, these data are omitted from the header. Ignored if caption_format does not equal DFXP.
  # @option opts [Integer] :layout_target_caption_length_ms Captions generated will, on average, be this duration. However, they may vary significantly based on other parameters you set.
  # @option opts [String] :line_break_on_sentence Inserts a line break in between sentences that are in the same caption.
  # @option opts [String] :line_ending_format Determine the end of line (EOL) character to use for the captions.
  # @option opts [Integer] :lines_per_caption Number of lines to be displayed for each caption.
  # @option opts [String] :mask_profanity Replace profanity with asterisks.
  # @option opts [Integer] :maximum_caption_duration No captions longer than this (in milliseconds) will be produced. If not specified, there is no maximum.
  # @option opts [Integer] :merge_gap_interval Captions with a gap between them that is smaller than this (in milliseconds) will have their start and/or end times changed so there is no time gap between the captions.
  # @option opts [Integer] :minimum_caption_length_ms Extends the duration of short captions to the this minimum length. Additional time is taken from later caption blocks to meet this minimum time.
  # @option opts [Integer] :minimum_gap_between_captions_ms Adds a minimum time between captions such as there will always be some time between captions where no text is displayed. When captions are very close together, time will be removed from the caption duration to make the gap.
  # @option opts [String] :qt_seamless Does not put time gaps of any kind between caption blocks. Ignored if caption_format does not equal QT.
  # @option opts [String] :remove_disfluencies Remove verbal disfluencies from the generated transcript. Common disfluencies such as \&quot;um\&quot; and \&quot;ah\&quot; are removed while maintaining appropriate punctuation.
  # @option opts [Array<String>] :remove_sounds_list A list of sounds to not show in the caption. This is a JSON style list, and should look like [\&quot;MUSIC\&quot;, \&quot;LAUGH\&quot;]. Ignored if remove_sound_references is true.
  # @option opts [String] :remove_sound_references Remove ALL non-verbal sound and noise references from the generated transcript. Sounds and unidentified noises are depicted in the caption as [SOUND], [COUGH] and [NOISE]. If this parameter is set, these identifiers are omitted from the caption.
  # @option opts [String] :replace_slang Replace common slang terms from the generated transcript. Common replacements are \&quot;want to\&quot; for \&quot;wanna\&quot;, \&quot;going to\&quot; for \&quot;gonna\&quot;, etc.
  # @option opts [Integer] :silence_max_ms If there is a interval of silence in the middle of a sentence longer than this, then the caption will be split.
  # @option opts [String] :single_speaker_per_caption When true, puts each speaker into its own caption. When false, more than one speaker may appear in a single caption.
  # @option opts [Array<String>] :sound_boundaries Specifies the characters to surround sound references with. The default will generate sound references that look like this: [MUSIC].
  # @option opts [Integer] :sound_threshold Sound references that are longer than this threshold will be made their own caption entirely, and will not have any text included with them. If not set, Sound references will be included back to back with text no matter the duration of the sound.
  # @option opts [String] :sound_tokens_by_caption If true, all sound references will always be in their own caption. If false, more than one sound reference may appear in a single caption.
  # @option opts [String] :sound_tokens_by_line If true, all sound references will always be in their own line. If false, more than one sound reference may appear in a single line.
  # @option opts [Array<String>] :sound_tokens_by_caption_list If non-empty, the specified sound references will always be in their own caption. If empty, more than one sound reference may appear in a single caption. Ignored if sound_tokens_by_caption is true.
  # @option opts [Array<String>] :sound_tokens_by_line_list If non-empty, the specified sound references will always be in their own line. If empty, more than one sound reference may appear in a single line. Ignored if sound_tokens_by_line is true.
  # @option opts [String] :speaker_on_new_line If true, a speaker change will cause a new caption to be made. If false, multiple speakers may appear in a single caption.
  # @option opts [String] :srt_format If the caption format is SRT, determines what the caption blocks will look like. The default, prints caption blocks that look like this:    1:   00:00:06,060 --&gt; 00:00:16,060   This is the caption text.  You can alter the caption block by re-arranging or removing the substitution string values, shown enclosed in braces \&quot;{}\&quot; in the default value below. Substitution strings may used more than once if desired. Any text that is not a substitution string will be displayed as written. To add new lines, include a \\n. Note, you may need to escape the \\n with an extra backslash when encoding the request. 
  # @option opts [String] :strip_square_brackets Removes all square brackets like &#39;[&#39; or &#39;]&#39; from captions. By default square brackets surround sound references like &#39;[MUSIC]&#39;, but they may exist as part of the caption text as well.
  # @option opts [String] :utf8_mark Adds a utf8 bytemark to the beginning of the caption. This should only be used if the system you are loading the caption files into needs a byte marker. The vast majority of systems do not.
  # @option opts [String] :replace_english_spelling Replaces English spelling with location accurate spelling. i.e. Color --&gt; Colour  A: American  B: British  Z: British ize  U: Australian  C: Canadian 
  # @return [String]
  describe 'get_caption test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for job_info
  # @param v 
  # @param job_id 
  # @param [Hash] opts the optional parameters
  # @return [JobInfoResponse]
  describe 'job_info test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for new_job
  # Create a new job. A job is a container into which you can upload media and request that transcription be performed. Creating a job is prerequisite for virtually all other methods.
  # @param v 
  # @param new_job_body 
  # @param [Hash] opts the optional parameters
  # @return [NewJobResponse]
  describe 'new_job test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for perform_transcription
  # Request that transcription be performed on the specified job. A callback URL, if specified, will be called when the transcription is complete. See [callback documentation](https://cielo24.readthedocs.io/en/latest/basics.html#callbacks-label) for details.
  # @param v 
  # @param perform_transcription_body 
  # @param [Hash] opts the optional parameters
  # @return [PerformTranscriptionResponse]
  describe 'perform_transcription test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for perform_translation
  # Request that orders a new Translation language for a video that has been previously Transcribed and/or Translated. The New Job ID and job target language will be returned upon completion.
  # @param v 
  # @param job_id 
  # @param target_languages The language(s) being ordered (Any RFC 5646 language code) separated by comma (,)
  # @param [Hash] opts the optional parameters
  # @option opts [String] :approve_uplevel 
  # @return [PerformTranslationResponse]
  describe 'perform_translation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
