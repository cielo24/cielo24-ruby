=begin
#Cielo24

#The cielo24 Web Services Platform API allows developers to easily integrate transcription, captioning and keyword extraction into their applications without having to use a manual web portal.

The version of the OpenAPI document: 1.0.0
Contact: devs@cielo24.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.0

=end

require 'spec_helper'
require 'json'
require 'date'

# Unit tests for cielo24::JobOptions
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe cielo24::JobOptions do
  let(:instance) { cielo24::JobOptions.new }

  describe 'test an instance of JobOptions' do
    it 'should create an instance of JobOptions' do
      expect(instance).to be_instance_of(cielo24::JobOptions)
    end
  end
  describe 'test attribute "customer_approval_steps"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('Array<String>', ["TRANSLATION", "RETURN"])
      # validator.allowable_values.each do |value|
      #   expect { instance.customer_approval_steps = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "customer_approval_tool"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["AMARA", "CIELO24"])
      # validator.allowable_values.each do |value|
      #   expect { instance.customer_approval_tool = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "custom_metadata"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "notes"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "return_iwp"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "generate_media_intelligence_iwp"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "speaker_id"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["true", "false"])
      # validator.allowable_values.each do |value|
      #   expect { instance.speaker_id = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "audio_description"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["true", "false"])
      # validator.allowable_values.each do |value|
      #   expect { instance.audio_description = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "on_screen_text"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["true", "false"])
      # validator.allowable_values.each do |value|
      #   expect { instance.on_screen_text = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "music_lyrics"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["true", "false"])
      # validator.allowable_values.each do |value|
      #   expect { instance.music_lyrics = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "custom_special_handling"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["true", "false"])
      # validator.allowable_values.each do |value|
      #   expect { instance.custom_special_handling = value }.not_to raise_error
      # end
    end
  end

end
