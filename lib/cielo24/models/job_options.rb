=begin
#Cielo24

#The cielo24 Web Services Platform API allows developers to easily integrate transcription, captioning and keyword extraction into their applications without having to use a manual web portal.

The version of the OpenAPI document: 1.0.0
Contact: devs@cielo24.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.0

=end

require 'date'
require 'time'

module cielo24
  class JobOptions
    # Requires your approval of a job at specified points in the workflow. When the job is ready for approval you will be emailed a link that will take you to a web based tool you can use to view, edit and approve the job. You may request approval at two points in the workflow: before translation and before the job is returned.
    attr_accessor :customer_approval_steps

    # Determines which web based tool to use for viewing, editing and approving jobs.
    attr_accessor :customer_approval_tool

    # A JSON dictionary of key value pairs. These will be used as substitution strings when building the callback URL and custom DFXP caption header.
    attr_accessor :custom_metadata

    # Allows you to provide text that will be displayed to the transcriber when the job is processed. An HTML included will be escaped.
    attr_accessor :notes

    # Allows you to receive additional callbacks when interim versions of the job are completed. If you specified a callback_url, then a callback will sent for FINAL regardless of the value of this option.
    attr_accessor :return_iwp

    # Requests that media intelligence be generated for the specified interim/final versions of the transcript. Media intelligence data is added to the ElementList and can be retrieve using the get_elementlist API call. See [ElementList](https://cielo24.readthedocs.io/en/latest/output_formats/elementlist.html#media-intelligence-label) for details.
    attr_accessor :generate_media_intelligence_iwp

    # Requests that speaker names be identified.
    attr_accessor :speaker_id

    # Requests that all noises and sounds be identified.
    attr_accessor :audio_description

    # Requests that any text that appears in the media be added to the transcription.
    attr_accessor :on_screen_text

    # Requests that lyrics to songs be transcribed instead of labeled [MUSIC].
    attr_accessor :music_lyrics

    # Requests that transcribers follow submitted instruction set.
    attr_accessor :custom_special_handling

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'customer_approval_steps' => :'customer_approval_steps',
        :'customer_approval_tool' => :'customer_approval_tool',
        :'custom_metadata' => :'custom_metadata',
        :'notes' => :'notes',
        :'return_iwp' => :'return_iwp',
        :'generate_media_intelligence_iwp' => :'generate_media_intelligence_iwp',
        :'speaker_id' => :'speaker_id',
        :'audio_description' => :'audio_description',
        :'on_screen_text' => :'on_screen_text',
        :'music_lyrics' => :'music_lyrics',
        :'custom_special_handling' => :'custom_special_handling'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'customer_approval_steps' => :'Array<String>',
        :'customer_approval_tool' => :'String',
        :'custom_metadata' => :'Object',
        :'notes' => :'Object',
        :'return_iwp' => :'Array<IWPEnum>',
        :'generate_media_intelligence_iwp' => :'Array<IWPEnum>',
        :'speaker_id' => :'String',
        :'audio_description' => :'String',
        :'on_screen_text' => :'String',
        :'music_lyrics' => :'String',
        :'custom_special_handling' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'notes',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `cielo24::JobOptions` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `cielo24::JobOptions`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'customer_approval_steps')
        if (value = attributes[:'customer_approval_steps']).is_a?(Array)
          self.customer_approval_steps = value
        end
      end

      if attributes.key?(:'customer_approval_tool')
        self.customer_approval_tool = attributes[:'customer_approval_tool']
      else
        self.customer_approval_tool = 'CIELO24'
      end

      if attributes.key?(:'custom_metadata')
        self.custom_metadata = attributes[:'custom_metadata']
      end

      if attributes.key?(:'notes')
        self.notes = attributes[:'notes']
      end

      if attributes.key?(:'return_iwp')
        if (value = attributes[:'return_iwp']).is_a?(Array)
          self.return_iwp = value
        end
      end

      if attributes.key?(:'generate_media_intelligence_iwp')
        if (value = attributes[:'generate_media_intelligence_iwp']).is_a?(Array)
          self.generate_media_intelligence_iwp = value
        end
      end

      if attributes.key?(:'speaker_id')
        self.speaker_id = attributes[:'speaker_id']
      else
        self.speaker_id = 'false'
      end

      if attributes.key?(:'audio_description')
        self.audio_description = attributes[:'audio_description']
      else
        self.audio_description = 'false'
      end

      if attributes.key?(:'on_screen_text')
        self.on_screen_text = attributes[:'on_screen_text']
      else
        self.on_screen_text = 'false'
      end

      if attributes.key?(:'music_lyrics')
        self.music_lyrics = attributes[:'music_lyrics']
      else
        self.music_lyrics = 'false'
      end

      if attributes.key?(:'custom_special_handling')
        self.custom_special_handling = attributes[:'custom_special_handling']
      else
        self.custom_special_handling = 'false'
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      customer_approval_tool_validator = EnumAttributeValidator.new('String', ["AMARA", "CIELO24"])
      return false unless customer_approval_tool_validator.valid?(@customer_approval_tool)
      speaker_id_validator = EnumAttributeValidator.new('String', ["true", "false"])
      return false unless speaker_id_validator.valid?(@speaker_id)
      audio_description_validator = EnumAttributeValidator.new('String', ["true", "false"])
      return false unless audio_description_validator.valid?(@audio_description)
      on_screen_text_validator = EnumAttributeValidator.new('String', ["true", "false"])
      return false unless on_screen_text_validator.valid?(@on_screen_text)
      music_lyrics_validator = EnumAttributeValidator.new('String', ["true", "false"])
      return false unless music_lyrics_validator.valid?(@music_lyrics)
      custom_special_handling_validator = EnumAttributeValidator.new('String', ["true", "false"])
      return false unless custom_special_handling_validator.valid?(@custom_special_handling)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_approval_tool Object to be assigned
    def customer_approval_tool=(customer_approval_tool)
      validator = EnumAttributeValidator.new('String', ["AMARA", "CIELO24"])
      unless validator.valid?(customer_approval_tool)
        fail ArgumentError, "invalid value for \"customer_approval_tool\", must be one of #{validator.allowable_values}."
      end
      @customer_approval_tool = customer_approval_tool
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] speaker_id Object to be assigned
    def speaker_id=(speaker_id)
      validator = EnumAttributeValidator.new('String', ["true", "false"])
      unless validator.valid?(speaker_id)
        fail ArgumentError, "invalid value for \"speaker_id\", must be one of #{validator.allowable_values}."
      end
      @speaker_id = speaker_id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] audio_description Object to be assigned
    def audio_description=(audio_description)
      validator = EnumAttributeValidator.new('String', ["true", "false"])
      unless validator.valid?(audio_description)
        fail ArgumentError, "invalid value for \"audio_description\", must be one of #{validator.allowable_values}."
      end
      @audio_description = audio_description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] on_screen_text Object to be assigned
    def on_screen_text=(on_screen_text)
      validator = EnumAttributeValidator.new('String', ["true", "false"])
      unless validator.valid?(on_screen_text)
        fail ArgumentError, "invalid value for \"on_screen_text\", must be one of #{validator.allowable_values}."
      end
      @on_screen_text = on_screen_text
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] music_lyrics Object to be assigned
    def music_lyrics=(music_lyrics)
      validator = EnumAttributeValidator.new('String', ["true", "false"])
      unless validator.valid?(music_lyrics)
        fail ArgumentError, "invalid value for \"music_lyrics\", must be one of #{validator.allowable_values}."
      end
      @music_lyrics = music_lyrics
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] custom_special_handling Object to be assigned
    def custom_special_handling=(custom_special_handling)
      validator = EnumAttributeValidator.new('String', ["true", "false"])
      unless validator.valid?(custom_special_handling)
        fail ArgumentError, "invalid value for \"custom_special_handling\", must be one of #{validator.allowable_values}."
      end
      @custom_special_handling = custom_special_handling
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          customer_approval_steps == o.customer_approval_steps &&
          customer_approval_tool == o.customer_approval_tool &&
          custom_metadata == o.custom_metadata &&
          notes == o.notes &&
          return_iwp == o.return_iwp &&
          generate_media_intelligence_iwp == o.generate_media_intelligence_iwp &&
          speaker_id == o.speaker_id &&
          audio_description == o.audio_description &&
          on_screen_text == o.on_screen_text &&
          music_lyrics == o.music_lyrics &&
          custom_special_handling == o.custom_special_handling
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [customer_approval_steps, customer_approval_tool, custom_metadata, notes, return_iwp, generate_media_intelligence_iwp, speaker_id, audio_description, on_screen_text, music_lyrics, custom_special_handling].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = cielo24.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
