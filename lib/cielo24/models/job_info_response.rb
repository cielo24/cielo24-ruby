=begin
#Cielo24

#The cielo24 Web Services Platform API allows developers to easily integrate transcription, captioning and keyword extraction into their applications without having to use a manual web portal.

The version of the OpenAPI document: 1.0.0
Contact: devs@cielo24.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.0

=end

require 'date'
require 'time'

module cielo24
  class JobInfoResponse
    attr_accessor :job_id

    attr_accessor :job_name

    attr_accessor :media_length_seconds

    # Depends on third-party integrations.
    attr_accessor :external_id

    attr_accessor :priority

    attr_accessor :fidelity

    attr_accessor :job_status

    attr_accessor :options

    attr_accessor :return_targets

    # RFC 5646 Language Code
    attr_accessor :source_language

    # RFC 5646 Language Code
    attr_accessor :target_language

    # ISO 8601 Date String
    attr_accessor :creation_date

    # ISO 8601 Date String
    attr_accessor :start_date

    # ISO 8601 Date String
    attr_accessor :due_date

    # ISO 8601 Date String
    attr_accessor :completed_date

    # ISO 8601 Date String
    attr_accessor :return_date

    # ISO 8601 Date String
    attr_accessor :authorization_date

    attr_accessor :job_difficulty

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'job_id' => :'JobId',
        :'job_name' => :'JobName',
        :'media_length_seconds' => :'MediaLengthSeconds',
        :'external_id' => :'ExternalId',
        :'priority' => :'Priority',
        :'fidelity' => :'Fidelity',
        :'job_status' => :'JobStatus',
        :'options' => :'Options',
        :'return_targets' => :'ReturnTargets',
        :'source_language' => :'SourceLanguage',
        :'target_language' => :'TargetLanguage',
        :'creation_date' => :'CreationDate',
        :'start_date' => :'StartDate',
        :'due_date' => :'DueDate',
        :'completed_date' => :'CompletedDate',
        :'return_date' => :'ReturnDate',
        :'authorization_date' => :'AuthorizationDate',
        :'job_difficulty' => :'JobDifficulty'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'job_id' => :'String',
        :'job_name' => :'String',
        :'media_length_seconds' => :'Float',
        :'external_id' => :'String',
        :'priority' => :'String',
        :'fidelity' => :'String',
        :'job_status' => :'String',
        :'options' => :'JobOptions',
        :'return_targets' => :'Object',
        :'source_language' => :'String',
        :'target_language' => :'String',
        :'creation_date' => :'String',
        :'start_date' => :'String',
        :'due_date' => :'String',
        :'completed_date' => :'String',
        :'return_date' => :'String',
        :'authorization_date' => :'String',
        :'job_difficulty' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `cielo24::JobInfoResponse` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `cielo24::JobInfoResponse`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'job_id')
        self.job_id = attributes[:'job_id']
      end

      if attributes.key?(:'job_name')
        self.job_name = attributes[:'job_name']
      end

      if attributes.key?(:'media_length_seconds')
        self.media_length_seconds = attributes[:'media_length_seconds']
      end

      if attributes.key?(:'external_id')
        self.external_id = attributes[:'external_id']
      end

      if attributes.key?(:'priority')
        self.priority = attributes[:'priority']
      end

      if attributes.key?(:'fidelity')
        self.fidelity = attributes[:'fidelity']
      end

      if attributes.key?(:'job_status')
        self.job_status = attributes[:'job_status']
      end

      if attributes.key?(:'options')
        self.options = attributes[:'options']
      end

      if attributes.key?(:'return_targets')
        self.return_targets = attributes[:'return_targets']
      end

      if attributes.key?(:'source_language')
        self.source_language = attributes[:'source_language']
      end

      if attributes.key?(:'target_language')
        self.target_language = attributes[:'target_language']
      end

      if attributes.key?(:'creation_date')
        self.creation_date = attributes[:'creation_date']
      end

      if attributes.key?(:'start_date')
        self.start_date = attributes[:'start_date']
      end

      if attributes.key?(:'due_date')
        self.due_date = attributes[:'due_date']
      end

      if attributes.key?(:'completed_date')
        self.completed_date = attributes[:'completed_date']
      end

      if attributes.key?(:'return_date')
        self.return_date = attributes[:'return_date']
      end

      if attributes.key?(:'authorization_date')
        self.authorization_date = attributes[:'authorization_date']
      end

      if attributes.key?(:'job_difficulty')
        self.job_difficulty = attributes[:'job_difficulty']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      priority_validator = EnumAttributeValidator.new('String', ["STANDARD", "PRIORITY"])
      return false unless priority_validator.valid?(@priority)
      fidelity_validator = EnumAttributeValidator.new('String', ["MECHANICAL", "PREMIUM", "PROFESSIONAL"])
      return false unless fidelity_validator.valid?(@fidelity)
      job_status_validator = EnumAttributeValidator.new('String', ["Authorizing", "Pending", "In Process", "Complete", "Media Failure", "Reviewing"])
      return false unless job_status_validator.valid?(@job_status)
      job_difficulty_validator = EnumAttributeValidator.new('String', ["Good", "Bad", "Unknown"])
      return false unless job_difficulty_validator.valid?(@job_difficulty)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] priority Object to be assigned
    def priority=(priority)
      validator = EnumAttributeValidator.new('String', ["STANDARD", "PRIORITY"])
      unless validator.valid?(priority)
        fail ArgumentError, "invalid value for \"priority\", must be one of #{validator.allowable_values}."
      end
      @priority = priority
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fidelity Object to be assigned
    def fidelity=(fidelity)
      validator = EnumAttributeValidator.new('String', ["MECHANICAL", "PREMIUM", "PROFESSIONAL"])
      unless validator.valid?(fidelity)
        fail ArgumentError, "invalid value for \"fidelity\", must be one of #{validator.allowable_values}."
      end
      @fidelity = fidelity
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] job_status Object to be assigned
    def job_status=(job_status)
      validator = EnumAttributeValidator.new('String', ["Authorizing", "Pending", "In Process", "Complete", "Media Failure", "Reviewing"])
      unless validator.valid?(job_status)
        fail ArgumentError, "invalid value for \"job_status\", must be one of #{validator.allowable_values}."
      end
      @job_status = job_status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] job_difficulty Object to be assigned
    def job_difficulty=(job_difficulty)
      validator = EnumAttributeValidator.new('String', ["Good", "Bad", "Unknown"])
      unless validator.valid?(job_difficulty)
        fail ArgumentError, "invalid value for \"job_difficulty\", must be one of #{validator.allowable_values}."
      end
      @job_difficulty = job_difficulty
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          job_id == o.job_id &&
          job_name == o.job_name &&
          media_length_seconds == o.media_length_seconds &&
          external_id == o.external_id &&
          priority == o.priority &&
          fidelity == o.fidelity &&
          job_status == o.job_status &&
          options == o.options &&
          return_targets == o.return_targets &&
          source_language == o.source_language &&
          target_language == o.target_language &&
          creation_date == o.creation_date &&
          start_date == o.start_date &&
          due_date == o.due_date &&
          completed_date == o.completed_date &&
          return_date == o.return_date &&
          authorization_date == o.authorization_date &&
          job_difficulty == o.job_difficulty
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [job_id, job_name, media_length_seconds, external_id, priority, fidelity, job_status, options, return_targets, source_language, target_language, creation_date, start_date, due_date, completed_date, return_date, authorization_date, job_difficulty].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = cielo24.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
